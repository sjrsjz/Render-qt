#version 430 core
layout (local_size_x=####,local_size_y=####) in;//#### means default pixel(or workspace) size
layout (rgba32f,binding=0) uniform image2D input_;
layout (rgba32f,binding=1) uniform image2D output_;
layout (rgba32f,binding=2) uniform image2D data_;

uniform vec4 RGBA;
uniform vec4 RGBA2;
uniform float iTime;
uniform float iScale;
vec3 ToRGB(float _A_,float _B_,vec3 _RGB_,vec3 _RGB2_){
    float _co_=max(_A_+1.0- log(.5*log(_B_)),0);
    _co_ = sqrt(_co_/256.0);
    return _RGB2_*vec3(.5+.5*cos(6.2831*_co_+_RGB_.x),.5+.5*cos(6.2831*_co_+_RGB_.y),.5+.5*cos(6.2831*_co_+_RGB_.z));
}
vec2 cMul(vec2 a, vec2 b) {
	return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);
}
vec2 cLog(vec2 a) {
	float b =  atan(a.y,a.x);
	if (b<0.0) b+=2.0*3.1415926535;
	return vec2(log(length(a)),b);
}
vec2 cExp(vec2 z) {
	return exp(z.x) * vec2(cos(z.y), sin(z.y));
}
vec2 cPow(vec2 z, vec2 a) {
	return cExp(cMul(cLog(z), a));
}
vec2 cDiv(vec2 a, vec2 b){
  float d = dot(b,b);
  return vec2(dot(a,b),a.y*b.x-a.x*b.y)/d;
}

vec4 color(vec2 pos){
    pos*=iScale;
    vec4 Calc;
    pos*=2;
    int S=200;
    vec2 z1=pos;
    vec2 p=0.5*vec2(cos(iTime),sin(iTime));
    int i=0;
    for(i=0;i<=S;i++){
        z1=(cPow(z1,vec2(2,0)))-0*exp(1)*abs(z1)+p;
        if(length(z1)>2) break;
    }

    return vec4(ToRGB(i,dot(z1,z1),RGBA.rgb,RGBA2.rgb),1);
}

void main(){
    ivec2 p=ivec2(gl_GlobalInvocationID.xy);
    imageStore(output_,p,color(vec2(p)/imageSize(output_)*2-1));
}
