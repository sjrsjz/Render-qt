#version 430 core
layout (local_size_x=####,local_size_y=####) in;//#### means default pixel(or workspace) size
layout (rgba32f,binding=0) uniform image2D input_;
layout (rgba32f,binding=1) uniform image2D output_;
layout (rgba32f,binding=2) uniform image2D data_;

layout (binding=0) uniform sampler2D tex_;

uniform vec4 RGBA;
uniform vec4 RGBA2;
uniform float iTime;
uniform float iScale;
uniform int iFrame;

uniform vec4 XY2D;
uniform vec4 XY2D_tex;
uniform vec4 iMouse;

vec3 ToRGB(float _A_,float _B_,vec3 _RGB_,vec3 _RGB2_){
    float _co_=max(_A_+1.0- log(.5*log(_B_)),0);
    _co_ = sqrt(_co_/256.0);
    return _RGB2_*vec3(.5+.5*cos(6.2831*_co_+_RGB_.x),.5+.5*cos(6.2831*_co_+_RGB_.y),.5+.5*cos(6.2831*_co_+_RGB_.z));
}
vec2 cMul(vec2 a, vec2 b) {
	return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);
}
vec2 cLog(vec2 a) {
	float b =  atan(a.y,a.x);
	if (b<0.0) b+=2.0*3.1415926535;
	return vec2(log(length(a)),b);
}
vec2 cExp(vec2 z) {
	return exp(z.x) * vec2(cos(z.y), sin(z.y));
}
vec2 cPow(vec2 z, vec2 a) {
	return cExp(cMul(cLog(z), a));
}
vec2 cDiv(vec2 a, vec2 b){
  float d = dot(b,b);
  return vec2(dot(a,b),a.y*b.x-a.x*b.y)/d;
}

vec4 color(vec2 pos){
    vec2 pos0=pos;
    pos*=iScale;
    pos+=XY2D.xy;
    pos=abs(pos);
    vec4 Calc;
    pos*=2;
    int S=200;
    vec2 z1=pos;
    vec2 p=pos;//0.5*vec2(cos(iTime),sin(iTime));
    int i=0;
    for(i=0;i<=S;i++){
        z1=abs(cPow(z1,vec2(3,0)))-exp(1)*abs(z1)+p;
        if(length(z1)>2) break;
    }
    vec4 color=vec4(ToRGB(i,dot(z1,z1),RGBA.rgb,RGBA2.rgb),1);
    //color=mix(color,texture(tex_,pos),1);
    return color;
}

float sdBox( in vec2 p, in vec2 b )
{
    vec2 d = abs(p)-b;
    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);
}

const int AA = 16;

void main(){
    if(iFrame>=AA*AA){
        imageStore(output_,ivec2(gl_GlobalInvocationID.xy),imageLoad(input_,ivec2(gl_GlobalInvocationID.xy)));
        return;
    }
    ivec2 p=ivec2(gl_GlobalInvocationID.xy);

    vec2 XY01=(XY2D_tex.xy * 0.5 + 0.5)*vec2(imageSize(output_));

    float x_offset = (iFrame%AA)/float(AA);
    float y_offset = int(iFrame/AA)/float(AA);

    vec2 s=vec2(p+vec2(x_offset,y_offset))/imageSize(output_)*2-1;
    float d=float(imageSize(output_).y)/imageSize(output_).x;
    s*=vec2(1,min(1,d));
    vec4 c=color(s);
    //c=mix(c,vec4(1,0,0,1),iMouse.x*float(length(XY01-p)));
    // draw a square at the mouse position
    c=mix(c,vec4(0,1,0,1),iMouse.x*float(abs(sdBox(XY01-p,vec2(50)))<1));
    
    imageStore(output_,p,mix(imageLoad(input_,p),c,1.0/float(iFrame+1)));
}
