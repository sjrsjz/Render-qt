#version 430 core
layout (local_size_x=####,local_size_y=####) in;//#### means default pixel(or workspace) size
layout (rgba32f,binding=0) uniform image2D input_;
layout (rgba32f,binding=1) uniform image2D output_;
layout (rgba32f,binding=2) uniform image2D data_;

uniform vec4 RGBA;
uniform vec4 RGBA2;
uniform float iTime;
uniform float iScale;
uniform mat4 iMat;

uniform vec4 XY2D;

float sdBox( in vec3 p, in vec3 b )
{
    vec3 d = abs(p) - b;
    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

float sdSphere( in vec3 p, in float s )
{
    return length(p)-s;
}

float sdPlane( in vec3 p, in vec4 n )
{
    return dot(p,normalize(n.xyz)) + n.w;
}
vec2 opU( vec2 d1, vec2 d2 )
{
    return (d1.x<d2.x) ? d1 : d2;
}

vec2 opS( vec2 d1, vec2 d2 )
{
    return (d1.x>d2.x) ? d1 : d2;
}

vec2 DE(vec3 p)
{
    p.x-=2;
    vec2 d1 = vec2(sdBox(p,vec3(0.5)),1.0);
    vec2 d2 = vec2(sdPlane(p,vec4(0,1,0,1)),2.0);
    return opU( d1, d2 );
}

vec3 getNormal(vec3 p)
{
    vec3 e = vec3(0.001,0.0,0.0);
    return normalize(vec3(DE(p+e.xyy).x-DE(p-e.xyy).x,
                          DE(p+e.yxy).x-DE(p-e.yxy).x,
                          DE(p+e.yyx).x-DE(p-e.yyx).x));
}

void setCamera(vec3 od,out vec3 ro,out vec3 rd)
{
    //use iMat to set camera
    //od is the original direction

    //ro and rd are the ray origin and direction

    vec4 ro4=vec4(0,0,0,1);
    vec4 rd4=vec4(od,0);
    ro=(iMat*ro4).xyz;
    rd=normalize((iMat*rd4).xyz);
}


vec3 doLighting(vec3 pos,vec3 lightDir,vec3 normal,float id)
{
    if(id==1.0)
    {
        float diff=max(0.2,dot(normal,lightDir));
        return vec3(1.0,0.0,0.0)*diff;
    }
    else if(id==2.0)
    {
        float diff=max(0.2,dot(normal,lightDir));
        return vec3(0.0,1.0,0.0)*diff;
    }
    else
    {
        return vec3(0.0,0.0,0.0);
    }
}

vec3 raymarch(vec3 ro,vec3 rd)
{
    float t=0.0;
    vec2 de;
    for(int i=0;i<128;i++)
    {
        vec3 p=ro+t*rd;
        de=DE(p);
        t+=de.x;
        if(de.x<0.001||t>100.0) break;
    }
    if(t>100.0)return vec3(0.0,0.0,0.0);
    vec3 pos=ro+t*rd;
    vec3 normal=getNormal(pos);
    vec3 lightDir=normalize(vec3(0.5,0.5,-1));
    vec3 col=doLighting(pos,lightDir,normal,de.y);
    return col;
}


vec3 render(){
    vec3 ro,rd;
    ivec2 p=ivec2(gl_GlobalInvocationID.xy);
    float aspect = imageSize(output_).x / imageSize(output_).y;
    vec2 scale = vec2(min(aspect,1.0),min(1.0/aspect,1.0));
    setCamera(vec3(2,(vec2(p.yx)/imageSize(output_).yx*2-1)/scale),ro,rd);
    return raymarch(ro,rd);
}

void main(){
    
    imageStore(output_,ivec2(gl_GlobalInvocationID.xy),vec4(render(),1));
}
